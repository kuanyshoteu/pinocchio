# Generated by Django 2.2.5 on 2019-11-07 10:36

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import papers.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tasks', '0001_initial'),
        ('accounts', '0001_initial'),
        ('schools', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Subtheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='')),
                ('video', models.FileField(default='', upload_to='')),
                ('file', models.FileField(default='', upload_to='')),
                ('youtube_video_link', models.TextField(default='')),
                ('task_list', models.ManyToManyField(related_name='subthemes', to='tasks.Task')),
            ],
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('typee', models.CharField(default='problem', max_length=250)),
                ('author_profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='paper_author', to='accounts.Profile')),
                ('done_by', models.ManyToManyField(related_name='done_papers', to='accounts.Profile')),
                ('school', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='school_papers', to='schools.School')),
                ('subthemes', models.ManyToManyField(related_name='papers', to='papers.Subtheme')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('is_homework', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('rating', models.IntegerField(default=0)),
                ('grades', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('estimater_ids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('access_to_everyone', models.BooleanField(default=False)),
                ('author_profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lesson_author', to='accounts.Profile')),
                ('done_by', models.ManyToManyField(related_name='done_lessons', to='accounts.Profile')),
                ('papers', models.ManyToManyField(related_name='lessons', to='papers.Paper')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='schools.School')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('image', models.ImageField(blank=True, height_field='height_field', null=True, upload_to=papers.models.upload_location, width_field='width_field')),
                ('height_field', models.IntegerField(default=0, null=True)),
                ('width_field', models.IntegerField(default=0, null=True)),
                ('cost', models.IntegerField(default=0)),
                ('content', models.TextField(default='')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('rating', models.FloatField(default=0)),
                ('stars', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('author_profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hiscourses', to='accounts.Profile')),
                ('done_by', models.ManyToManyField(related_name='done_courses', to='accounts.Profile')),
                ('lessons', models.ManyToManyField(related_name='courses', to='papers.Lesson')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='school_courses', to='schools.School')),
                ('students', models.ManyToManyField(related_name='courses', to='accounts.Profile')),
            ],
            options={
                'ordering': ['rating'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=1)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField(default='')),
                ('author_profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hiscomments', to='accounts.Profile')),
                ('dislikes', models.ManyToManyField(related_name='disliked_comments', to='accounts.Profile')),
                ('lesson', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='papers.Lesson')),
                ('likes', models.ManyToManyField(related_name='liked_comments', to='accounts.Profile')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='papers.Comment')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
    ]
